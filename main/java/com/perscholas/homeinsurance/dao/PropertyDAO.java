package com.perscholas.homeinsurance.dao;

import java.io.IOException;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.List;

import com.perscholas.homeinsurance.interfaces.PropertyDAOI;
import com.perscholas.homeinsurance.models.Property;
import com.perscholas.homeinsurance.models.Quote;
import com.perscholas.homeinsurance.models.User;

public class PropertyDAO implements PropertyDAOI
{
	/**Returns the location Id autogenerated by the database during insertion of the Location Object.
	 *@param location Represents an initialized Location Object. Note: A null value will render failed insertion.
	 *@return Returns the location identification number of the Location Object.
	 *@throws SQLException
	 *@throws ClassNotFoundException
	 *@throws IOException
	*/
	@Override
	public Integer registerProperty(Property property) throws SQLException, ClassNotFoundException, IOException
	{
		Connection conn = null;			
		PreparedStatement stmt = null;
		ResultSet rs = null;
		OracleConnection orcl = new OracleConnection();			//Declare variables and initialize Objects for database Connection
	
		String insertString = "insert into Properties(location_id, market_value, year_built, square_footage,"
				+ "dwelling_type, roof_material, garage_type, full_baths, half_baths, pool) values (?,?,?,?,?,?,?,?,?,?)";
	
		String[] COL = {"location_id"};
		int ID = -1; 
		conn = orcl.getConnection();
		System.out.println("DATABASE CONNECTION ESTABLISHED");
	
		try
		{
			stmt = conn.prepareStatement(insertString, COL);
			
			stmt.setInt(1, property.getLocationId());				//Assign values to Statement Object.
			stmt.setFloat(2, property.getMarketValue());
			stmt.setInt(3, property.getYearBuilt());
			stmt.setInt(4, property.getSquareFootage());
			stmt.setString(5, property.getDwellingType());
			stmt.setString(6, property.getRoofMaterial());
			stmt.setString(7, property.getGarageType());
			stmt.setInt(8, property.getFullBaths());
			stmt.setInt(9, property.getHalfBaths());
			stmt.setBoolean(10, property.isPool());
			
			stmt.executeUpdate();			//Execute query
			
			rs = stmt.getGeneratedKeys();
			if(rs != null && rs.next())
			{
				ID = rs.getInt(1);				
				property.setLocationId(ID);			//set value returned from ResultSet Object to locationId variable.
				System.out.println("The Property has been registered as LOCATION ID#: "+ID);
			}
		  }
	    catch (SQLException e)
		{
			System.out.println("Error: " + e.getMessage());
		}
		finally								//Close connection Objects.
		{
			if (rs != null) 
			{
				rs.close();
			}
			if (stmt != null) 
			{
				stmt.close();
			}
			if (conn != null) 
			{
				conn.close();
			}
		}
	    
		return ID;		//Return locationId assigned after insertion. -1 = failed insert.
	}
	
	
	/**Returns a Quote Object retrieved from the database based on the quote identification number passed.
	 *@param user_id Represents the user identification number.
	 *@return Returns List containing User Object matching passed user_id variable.
	 *@throws SQLException
	 *@throws ClassNotFoundException
	 *@throws IOException
	*/
	public List<Property> getPropertiesByLocationId(int locationId) throws ClassNotFoundException, IOException, SQLException
	{
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		OracleConnection orcl = new OracleConnection();
		Property property = null;
		
		String fetchString = "locations.location_id, locations.residence_type," + 
				"locations.address_line_1, locations.address_line_2, locations.city," + 
				"locations.location_state, locations.zip_code, locations.residence_use, properties.market_value," + 
				"properties.year_built, properties.square_footage, properties.dwelling_type," + 
				"properties.roof_material, properties.garage_type, properties.full_baths, properties.half_baths," + 
				"properties.pool FROM properties Inner Join Locations On properties.location_Id = Locations.location_id  Where properties.location_id = ?";
		try
		{
			conn = orcl.getConnection();
			stmt = conn.prepareStatement(fetchString);
			stmt.setInt(1, locationId);
			rs = stmt.executeQuery();
			
			while(rs.next())
			{
				property = new Property();
				property.setLocationId(rs.getInt(1));
				property.setResidenceType(rs.getString(2));
				property.setAddressLine1(rs.getString(3));
				property.setAddressLine2(rs.getString(4));
				property.setCity(rs.getString(5));
				property.setLocationState(rs.getString(6));
				property.setZipCode(rs.getString(7));
				property.setResidenceUse(rs.getString(8));
				property.setMarketValue(rs.getFloat(9));
				property.setYearBuilt(rs.getInt(10));
				property.setSquareFootage(rs.getInt(11));
				property.setDwellingType(rs.getString(12));
				property.setRoofMaterial(rs.getString(13));
				property.setGarageType(rs.getString(14));
				property.setFullBaths(rs.getInt(15));
				property.setHalfBaths(rs.getInt(16));
				property.setPool(rs.getBoolean(17));
			}
		}
		catch(SQLException e)
		{
			System.out.println("Error: " + e.getMessage());
		}
		finally
		{
			if (rs != null) 
			{
				rs.close();
			}
			if (stmt != null) 
			{
				stmt.close();
			}
			if (conn != null) 
			{
				conn.close();
			}
		}
		return property;
	}
	
	
	/**Returns a Quote Object retrieved from the database based on the quote identification number passed.
	 *@param user_id Represents the user identification number.
	 *@return Returns List containing User Object matching passed user_id variable.
	 *@throws SQLException
	 *@throws ClassNotFoundException
	 *@throws IOException
	*/
	public Property getPropertyByLocationId(int locationId) throws ClassNotFoundException, IOException, SQLException
	{
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		OracleConnection orcl = new OracleConnection();
		Property property = null;
		
		String fetchString = "locations.location_id, locations.residence_type," + 
				"locations.address_line_1, locations.address_line_2, locations.city," + 
				"locations.location_state, locations.zip_code, locations.residence_use, properties.market_value," + 
				"properties.year_built, properties.square_footage, properties.dwelling_type," + 
				"properties.roof_material, properties.garage_type, properties.full_baths, properties.half_baths," + 
				"properties.pool FROM properties Inner Join Locations On properties.location_Id = Locations.location_id  Where properties.location_id = ?";
		try
		{
			conn = orcl.getConnection();
			stmt = conn.prepareStatement(fetchString);
			stmt.setInt(1, locationId);
			rs = stmt.executeQuery();
			
			while(rs.next())
			{
				property = new Property();
				property.setLocationId(rs.getInt(1));
				property.setResidenceType(rs.getString(2));
				property.setAddressLine1(rs.getString(3));
				property.setAddressLine2(rs.getString(4));
				property.setCity(rs.getString(5));
				property.setLocationState(rs.getString(6));
				property.setZipCode(rs.getString(7));
				property.setResidenceUse(rs.getString(8));
				property.setMarketValue(rs.getFloat(9));
				property.setYearBuilt(rs.getInt(10));
				property.setSquareFootage(rs.getInt(11));
				property.setDwellingType(rs.getString(12));
				property.setRoofMaterial(rs.getString(13));
				property.setGarageType(rs.getString(14));
				property.setFullBaths(rs.getInt(15));
				property.setHalfBaths(rs.getInt(16));
				property.setPool(rs.getBoolean(17));
			}
		}
		catch(SQLException e)
		{
			System.out.println("Error: " + e.getMessage());
		}
		finally
		{
			if (rs != null) 
			{
				rs.close();
			}
			if (stmt != null) 
			{
				stmt.close();
			}
			if (conn != null) 
			{
				conn.close();
			}
		}
		return property;
	}
	
}
