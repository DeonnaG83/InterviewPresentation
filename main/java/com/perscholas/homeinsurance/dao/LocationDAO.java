package com.perscholas.homeinsurance.dao;

import java.io.IOException;
import java.sql.Connection;
import java.sql.Date;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.text.ParseException;
import java.util.ArrayList;
import java.util.List;

import com.perscholas.homeinsurance.interfaces.LocationDAOI;
import com.perscholas.homeinsurance.models.Homeowner;
import com.perscholas.homeinsurance.models.Location;
import com.perscholas.homeinsurance.models.User;

public class LocationDAO implements LocationDAOI
{
	
	/**Returns the location Id autogenerated by the database during insertion of the Location Object.
	 *@param location Represents an initialized Location Object. Note: A null value will render failed insertion.
	 *@return Returns the location identification number of the Location Object.
	 *@throws SQLException
	 *@throws ClassNotFoundException
	 *@throws IOException
	*/
	@Override
	public Integer registerLocation(Location location) throws SQLException, ClassNotFoundException, IOException
	{
		Connection conn = null;			
		PreparedStatement stmt = null;
		ResultSet rs = null;
		OracleConnection orcl = new OracleConnection();			//Declare variables and initialize Objects for database Connection
	
		String insertString = "insert into Locations(user_id, residence_type, address_line_1, address_line_2,"
				+ "city, location_state, zip_code, residence_use) values (?,?,?,?,?,?,?,?)";
	
		String[] COL = {"location_id"};
		int ID = -1; 
		conn = orcl.getConnection();
		System.out.println("DATABASE CONNECTION ESTABLISHED");
	
		try
		{
			stmt = conn.prepareStatement(insertString, COL);
			
			stmt.setInt(1, location.getUserId());				//Assign values to Statement Object.
			stmt.setString(2, location.getResidenceType());
			stmt.setString(3, location.getAddressLine1());
			stmt.setString(4, location.getAddressLine2());
			stmt.setString(5, location.getCity());
			stmt.setString(6, location.getLocationState());
			stmt.setString(7, location.getZipCode());
			stmt.setString(8, location.getResidenceUse());
			
			stmt.executeUpdate();			//Execute query
			
			rs = stmt.getGeneratedKeys();
			if(rs != null && rs.next())
			{
				ID = rs.getInt(1);				
				location.setLocationId(ID);			//set value returned from ResultSet Object to locationId variable.
				System.out.println("The Location has been registered as LOCATION ID#: "+ID);
			}
		  }
	    catch (SQLException e)
		{
			System.out.println("Error: " + e.getMessage());
		}
		finally								//Close connection Objects.
		{
			if (rs != null) 
			{
				rs.close();
			}
			if (stmt != null) 
			{
				stmt.close();
			}
			if (conn != null) 
			{
				conn.close();
			}
		}
	    
		return ID;		//Return locationId assigned after insertion. -1 = failed insert.
	}
	
	
	/**Returns a Location Object matching the locationId passed.
	 *@param locationId Represents an initialized Location Object. Note: A null value will render failed insertion.
	 *@return Returns the Location Object associated with location identification number passed.
	 *@throws SQLException
	 *@throws ClassNotFoundException
	 *@throws IOException
	*/
	@Override
	public Location getLocationByLocationId(int locationId)throws ClassNotFoundException, IOException, SQLException, ParseException
	{
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		OracleConnection orcl = new OracleConnection();
		
		//Create Location Object to return and a User Object for userId initialization.
		Homeowner homeowner = null;
		Location location = null;
		
		//This query retrieves the User data first needed to properly create Location Object(aggregate)
		//then obtains the associated location identification number information.
		String fetchString =  "SELECT locations.user_id, users.user_name, users.password,"+ 
	              			  "users.admin_Role, locations.location_id, locations.residence_type,"+
	              			  "locations.address_line_1, locations.address_line_2, locations.city,"+
	              			  "locations.location_state, locations.zip_code, locations.residence_use FROM Locations Inner JOIN users On users.user_Id = locations.user_Id WHERE locations.location_id = ?";
		try
		{
			conn = orcl.getConnection();
			stmt = conn.prepareStatement(fetchString);
			stmt.setInt(1, locationId);
			rs = stmt.executeQuery();								//Execute Query
			
				
			while(rs.next())									//Construct Objects based on values from query. User must be Constructed first.
			{
				homeowner = new Homeowner(rs.getInt(1), rs.getString(2), rs.getString(3), rs.getString(4));
			
				location = new Location(homeowner, rs.getString(6), rs.getString(7), rs.getString(8), 
										  rs.getString(9), rs.getString(10), rs.getString(11), rs.getString(12));
					location.setLocationId(rs.getInt(5));
			}
		}
		catch(SQLException e)
		{
			System.out.println("Error: " + e.getMessage());
		}
		finally									//Close all connection Objects.
		{
			if (rs != null) 
			{
				rs.close();
			}
			if (stmt != null) 
			{
				stmt.close();
			}
			if (conn != null) 
			{
				conn.close();
			}
		}
		return location;				//Return Location Object.
	}
		

/**Returns a Location Object matching the locationId passed.
 *@param userId Represents the user identification number.
 *@return Returns a List of Location Objects associated with user identification number passed.
 *@throws SQLException
 *@throws ClassNotFoundException
 *@throws IOException
 * @throws ParseException 
*/
	@Override
	public List<Location> getLocationByUserId(int userId)throws ClassNotFoundException, IOException, SQLException, ParseException
	{
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		OracleConnection orcl = new OracleConnection();
		
		//Create Location Object to return and a User Object for userId initialization.
		Homeowner homeowner = null;
		Location location = null;
		List<Location> locations = new ArrayList<Location>();
		
		//This query retrieves the User data first needed to properly create the Location Object(aggregate)
		//then obtains the associated user identification number.
		String fetchString =  "SELECT locations.user_id, users.user_name, users.password,"+ 
	              			  "users.admin_Role, locations.location_id, locations.residence_type,"+
	              			  "locations.address_line_1, locations.address_line_2, locations.city,"+
	              			  "locations.location_state, locations.zip_code, locations.residence_use FROM Locations Inner JOIN users On users.user_Id = locations.user_Id WHERE locations.user_id = ?";
		try
		{
			conn = orcl.getConnection();
			stmt = conn.prepareStatement(fetchString);
			stmt.setInt(1, userId);
			rs = stmt.executeQuery();								//Execute Query
					
			while(rs.next())										//Construct Objects based on values from query. User must be Constructed first.
			{
				homeowner = new Homeowner(rs.getInt(1), rs.getString(1), rs.getString(2), rs.getString(4));		//Initialize User Object
				
				
				if(rs.getString(8)!=null)				//If else statement decides how to Construct Object
				{
					location = new Location(homeowner, rs.getString(6), rs.getString(7), rs.getString(8), 		//Initialize location Object
										  rs.getString(9), rs.getString(10), rs.getString(11), rs.getString(12));
					location.setLocationId(rs.getInt(5));
				}
				else
				{
					location = new Location(homeowner, rs.getString(6), rs.getString(7),  
							  rs.getString(9), rs.getString(10),rs.getString(11), rs.getString(12));
					location.setLocationId(rs.getInt(5));
				}
					locations.add(location);					//Insert Object into ArrayList being returned.
			}
		}
		catch(SQLException e)
		{
			System.out.println("Error: " + e.getMessage());
		}
		finally									//Close all connection Objects.
		{
			if (rs != null) 
			{
				rs.close();
			}
			if (stmt != null) 
			{
				stmt.close();
			}
			if (conn != null) 
			{
				conn.close();
			}
		}
		return locations;				//Return Location List.
	}
}	
